-- local lsp_zero = require('lsp-zero')
--
-- lsp_zero.preset('recommended')
--
-- local cmp = require('cmp')
-- local cmp_select = { behavior = cmp.SelectBehavior.Select }
-- local cmp_mappings = lsp_zero.defaults.cmp_mappings({
--     ['<Up>'] = function(fallback)
--         if cmp.visible() then
--             cmp.close()
--         end
--         fallback()
--     end,
--     ['<Down>'] = function(fallback)
--         if cmp.visible() then
--             cmp.close()
--         end
--         fallback()
--     end,
--     ['<S-Tab>'] = cmp.mapping.select_prev_item(cmp_select),
--     ['<Tab>'] = cmp.mapping.select_next_item(cmp_select),
--     ['<Enter>'] = cmp.mapping.confirm({ select = true }),
--     ["<C-Space>"] = cmp.mapping.complete()
-- })
--
-- lsp_zero.set_preferences({
--     sign_icons = {}
-- })
--
-- cmp.setup({
--     preselect = 'none',
--     completion = {
--         completeopt = 'menu,menuone,noinsert,noselect'
--     },
--     mapping = cmp_mappings
-- })
--
-- lsp_zero.on_attach(function(client, bufnr)
--     local opts = { buffer = bufnr, remap = false }
--     vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts)
--     vim.keymap.set("n", "K", function() vim.lsp.buf.hover() end, opts)
--     vim.keymap.set("n", "<leader>vws", function() vim.lsp.buf.workspace_symbol() end, opts)
--     vim.keymap.set("n", "<leader>vd", function() vim.lsp.buf.open_float() end, opts)
--     vim.keymap.set("n", "[d", function() vim.lsp.buf.goto_next() end, opts)
--     vim.keymap.set("n", "]d", function() vim.lsp.buf.goto_prev() end, opts)
--     vim.keymap.set("n", "<leader>vca", function() vim.lsp.buf.code_action() end, opts)
--     vim.keymap.set("n", "<leader>vrr", function() vim.lsp.buf.references() end, opts)
--     vim.keymap.set("n", "<leader>vrn", function() vim.lsp.buf.rename() end, opts)
--
--     -- vim.api.nvim_buf_set_option(0, 'omnifunc', 'v:lua.vim.lsp.omnifunc')
-- end)
--
-- -- here you can setup the language servers
-- -- require('lspconfig').lua_ls.setup({})
-- require 'lspconfig'.pylsp.setup {
--     settings = {
--         pylsp = {
--             plugins = {
--                 -- pycodestyle = {
--                 --     ignore = {
--                 --         'W391',
--                 --         'E305',
--                 --         'E302'
--                 --     },
--                 --     maxLineLength = 100
--                 -- }
--             }
--         }
--     }
-- }
--
-- require 'lspconfig'.lua_ls.setup {
--     on_init = function(client)
--         local path = client.workspace_folders[1].name
--         if not vim.loop.fs_stat(path .. '/.luarc.json') and not vim.loop.fs_stat(path .. '/.luarc.jsonc') then
--             client.config.settings = vim.tbl_deep_extend('force', client.config.settings, {
--                 Lua = {
--                     runtime = {
--                         -- Tell the language server which version of Lua you're using
--                         -- (most likely LuaJIT in the case of Neovim)
--                         version = 'LuaJIT'
--                     },
--                     -- Make the server aware of Neovim runtime files
--                     workspace = {
--                         checkThirdParty = false,
--                         library = {
--                             vim.env.VIMRUNTIME
--                             -- "${3rd}/luv/library"
--                             -- "${3rd}/busted/library",
--                         }
--                         -- or pull in all of 'runtimepath'. NOTE: this is a lot slower
--                         -- library = vim.api.nvim_get_runtime_file("", true)
--                     }
--                 }
--             })
--
--             client.notify("workspace/didChangeConfiguration", { settings = client.config.settings })
--         end
--         return true
--     end
-- }
--
-- require 'lspconfig'.clangd.setup {
--     init_options = {
--         compilationDatabaseDirectory = "build",
--         index = {
--             threads = 0,
--         },
--         clang = {
--             excludeArgs = { "-frounding-math" },
--         },
--     }
-- }
-- -- require "lspconfig".ccls.setup {
-- -- }
--
-- require "lspconfig".rust_analyzer.setup({
--     settings = {
--         ["rust-analyzer"] = {
--             imports = {
--                 granularity = {
--                     group = "module",
--                 },
--                 prefix = "self",
--             },
--             cargo = {
--                 buildScripts = {
--                     enable = true,
--                 },
--             },
--             procMacro = {
--                 enable = true
--             },
--         }
--     }
-- })
